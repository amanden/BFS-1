/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> li = new LinkedList<>();
        if(root == null) return li;
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        while(!q.isEmpty()){
            int size = q.size();
            List<Integer> l = new LinkedList<>();
            for(int i = 0; i < size; i++){
                TreeNode node = q.poll();
                l.add(node.val);
                if(node.left != null){
                    q.add(node.left);
                }if(node.right !=null) 
                    q.add(node.right);
            }
            li.add(l);
        }
        return li;
    }
    public List<List<Integer>> levelOrderRecursion(TreeNode root) {
        List<List<Integer>> li = new ArrayList<>();
        helper(root, li, 0);
        return li;
    }
    public void helper(TreeNode root, List<List<Integer>> li, int level){
        if(root == null) return;
        if(level != li.size())
            li.get(level).add(root.val);
        else
            li.add(new ArrayList<>(Arrays.asList(root.val)));
        
        helper(root.left, li, level + 1);
        helper(root.right, li, level + 1);
    }
}
